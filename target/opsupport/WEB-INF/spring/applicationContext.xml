<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"   
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
">  
    <!-- 引入属性文件 也支持路径classpath:jdbc.properties-->  
    <context:property-placeholder location="/WEB-INF/spring/jdbc.properties" />   
  
    <!-- 配置数据源 -->  
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />  
        <property name="initialSize" value="1" />
        <property name="maxActive" value="20" />  
        <property name="minIdle" value="1" />  
        <property name="maxWait" value="60000" />  
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <property name="removeAbandoned" value="true" />  
        <property name="removeAbandonedTimeout" value="1800" />  
        <property name="logAbandoned" value="true" />  
        <property name="filters" value="mergeStat" />  
    </bean>  
  
    <!-- myBatis文件 -->  
    <!-- mapperLocations: 用来指定Mapper映射文件(sql配置的地方)的位置 ，如果映射文件与相应的接口同名，且在同一路径下，那么可以不配置该选项-->
    <!-- typeAliasesPackage: 它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="mapperLocations" value="classpath:ibatis-mapper-xml/*Mapper.xml" />
        <property name="typeAliasesPackage" value="com.b5m.opsupport.bean.model" />
    </bean>  
  
    <!-- 注册Mapper(原来的dao)方式一: 通过org.mybatis.spring.mapper.MapperFactoryBean来配置
         也可不指定特定mapper，而使用自动扫描包的方式来注册各种Mapper，见下面的注册Mapper方式二
     -->
    <!-- 
    <bean id="studentDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.b5m.opsupport.dao.StudentDao"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
     -->
     
    <!-- 注册Mapper(原来的dao)方式二 -->
    <!--
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.b5m.opsupport.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>  
     -->
     
     <!-- SqlSessionTemplate 方式整合mybatis + spring -->
     <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">   
	   <constructor-arg index="0" ref="sqlSessionFactory" />   
     </bean>
     
     <!-- 
     <bean id="student2Dao" class="com.b5m.opsupport.dao.Student2Dao"/>
      -->
      
     <!-- 事务  druid监控等配置  http://blog.csdn.net/qyl445/article/details/9837579 -->
</beans> 